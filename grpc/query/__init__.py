# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: src/query/query_schema.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "DialogEntry",
    "QueryRequest",
    "QueryResponse",
    "QueryServiceBase",
    "QueryServiceStub",
    "QueryStreamResponse",
    "Role",
    "RoleType",
)

from collections.abc import AsyncIterator
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class RoleType(betterproto2.Enum):
    USER = 0

    ASSISTANT = 1


@dataclass(eq=False, repr=False)
class DialogEntry(betterproto2.Message):
    role: "Role | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    content: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    date: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)


default_message_pool.register_message("query", "DialogEntry", DialogEntry)


@dataclass(eq=False, repr=False)
class QueryRequest(betterproto2.Message):
    dialog: "list[DialogEntry]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    query: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("query", "QueryRequest", QueryRequest)


@dataclass(eq=False, repr=False)
class QueryResponse(betterproto2.Message):
    response: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message("query", "QueryResponse", QueryResponse)


@dataclass(eq=False, repr=False)
class QueryStreamResponse(betterproto2.Message):
    response: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "query", "QueryStreamResponse", QueryStreamResponse
)


@dataclass(eq=False, repr=False)
class Role(betterproto2.Message):
    type: "RoleType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: RoleType(0)
    )


default_message_pool.register_message("query", "Role", Role)


class QueryServiceStub(betterproto2.ServiceStub):
    async def query(
        self,
        message: "QueryRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "QueryResponse":
        return await self._unary_unary(
            "/query.QueryService/Query",
            message,
            QueryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_stream(
        self,
        message: "QueryRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[QueryStreamResponse]":
        async for response in self._unary_stream(
            "/query.QueryService/QueryStream",
            message,
            QueryStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class QueryServiceBase(ServiceBase):
    async def query(self, message: "QueryRequest") -> "QueryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_stream(
        self, message: "QueryRequest"
    ) -> "AsyncIterator[QueryStreamResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield QueryStreamResponse()

    async def __rpc_query(
        self, stream: "grpclib.server.Stream[QueryRequest, QueryResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query(request)
        await stream.send_message(response)

    async def __rpc_query_stream(
        self, stream: "grpclib.server.Stream[QueryRequest, QueryStreamResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.query_stream,
            stream,
            request,
        )

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/query.QueryService/Query": grpclib.const.Handler(
                self.__rpc_query,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRequest,
                QueryResponse,
            ),
            "/query.QueryService/QueryStream": grpclib.const.Handler(
                self.__rpc_query_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                QueryRequest,
                QueryStreamResponse,
            ),
        }
